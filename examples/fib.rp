fn fib_iter(i64 x): i64 {
  i64 prev2 = 1;
  i64 prev1 = 1;
  i64 total;

  if (x == 1 || x == 2) {
    return 1;
  }

  for (i64 i = 2; i < x; i = i + 1) {
    total = prev1 + prev2;
    prev2 = prev1;
    prev1 = total;
  }

  return total;
}

fn fib_rec(i64 x, &i64 y): i64 {
  y = y + 1;
  if (x == 1 || x == 2) {
    return 1;
  }

  return fib_rec(x - 1, &y) + fib_rec(x - 2, &y);
}

for (i64 num = 1; num <= 20; num = num + 1) {
  i64 i = 0;
  print("fib_iter(" + num as str + ") = " + fib_iter(num) as str);
  print("fib_rec(" + num as str + ") = " + fib_rec(num, &i) as str + " - recursive calls: " + i as str + "\n");
}
